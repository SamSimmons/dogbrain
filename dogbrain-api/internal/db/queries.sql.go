// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, email, password, created_at, updated_at, verification_token
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, email, password, created_at, updated_at, verification_token, verified_at
`

type CreateUserParams struct {
	ID                uuid.UUID `json:"id"`
	Email             string    `json:"email"`
	Password          string    `json:"password"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
	VerificationToken string    `json:"verification_token"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.VerificationToken,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VerificationToken,
		&i.VerifiedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, created_at, updated_at, verification_token, verified_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VerificationToken,
		&i.VerifiedAt,
	)
	return i, err
}

const verifyUser = `-- name: VerifyUser :one
UPDATE users
SET verified_at = $2
WHERE verification_token = $1 AND verified_at IS NULL
RETURNING id, email, password, created_at, updated_at, verification_token, verified_at
`

type VerifyUserParams struct {
	VerificationToken string       `json:"verification_token"`
	VerifiedAt        sql.NullTime `json:"verified_at"`
}

func (q *Queries) VerifyUser(ctx context.Context, arg VerifyUserParams) (User, error) {
	row := q.queryRow(ctx, q.verifyUserStmt, verifyUser, arg.VerificationToken, arg.VerifiedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VerificationToken,
		&i.VerifiedAt,
	)
	return i, err
}
